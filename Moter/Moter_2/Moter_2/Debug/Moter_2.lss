
Moter_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000126  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000097c  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000080f  00000000  00000000  00000b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000308  00000000  00000000  00001397  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000016a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fc  00000000  00000000  000016c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013b  00000000  00000000  00001ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001bfb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	43 c0       	rjmp	.+134    	; 0x122 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:

int main(void)
{
	unsigned char i;
	
	DDRB = 0x20;    //  MOTOR1_EN 를 출력 포트로  설정
  9e:	80 e2       	ldi	r24, 0x20	; 32
  a0:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xF0;    //  STEP0 ~ STEP3을 출력 포트로 설정
  a2:	80 ef       	ldi	r24, 0xF0	; 240
  a4:	81 bb       	out	0x11, r24	; 17
	PORTB &= ~0x20; //  M1 Disable, DC 모터 정지
  a6:	88 b3       	in	r24, 0x18	; 24
  a8:	8f 7d       	andi	r24, 0xDF	; 223
  aa:	88 bb       	out	0x18, r24	; 24
	
	while(1)
	{
		for ( i = 0; i < 12; i++ )  // 48 스텝 실행
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	2d c0       	rjmp	.+90     	; 0x10a <main+0x6c>
		{
			PORTD = 0x30;
  b0:	90 e3       	ldi	r25, 0x30	; 48
  b2:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	2f ef       	ldi	r18, 0xFF	; 255
  b6:	3f e3       	ldi	r19, 0x3F	; 63
  b8:	92 e0       	ldi	r25, 0x02	; 2
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	30 40       	sbci	r19, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x1c>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x26>
  c4:	00 00       	nop
			_delay_ms(100);
			PORTD = 0x90;
  c6:	90 e9       	ldi	r25, 0x90	; 144
  c8:	92 bb       	out	0x12, r25	; 18
  ca:	2f ef       	ldi	r18, 0xFF	; 255
  cc:	3f e3       	ldi	r19, 0x3F	; 63
  ce:	92 e0       	ldi	r25, 0x02	; 2
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	30 40       	sbci	r19, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x32>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x3c>
  da:	00 00       	nop
			_delay_ms(100);
			PORTD = 0xC0;
  dc:	90 ec       	ldi	r25, 0xC0	; 192
  de:	92 bb       	out	0x12, r25	; 18
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	3f e3       	ldi	r19, 0x3F	; 63
  e4:	92 e0       	ldi	r25, 0x02	; 2
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	30 40       	sbci	r19, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x48>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x52>
  f0:	00 00       	nop
			_delay_ms(100);
			PORTD = 0x60;
  f2:	90 e6       	ldi	r25, 0x60	; 96
  f4:	92 bb       	out	0x12, r25	; 18
  f6:	2f ef       	ldi	r18, 0xFF	; 255
  f8:	3f e3       	ldi	r19, 0x3F	; 63
  fa:	92 e0       	ldi	r25, 0x02	; 2
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	30 40       	sbci	r19, 0x00	; 0
 100:	90 40       	sbci	r25, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <main+0x5e>
 104:	00 c0       	rjmp	.+0      	; 0x106 <main+0x68>
 106:	00 00       	nop
	DDRD = 0xF0;    //  STEP0 ~ STEP3을 출력 포트로 설정
	PORTB &= ~0x20; //  M1 Disable, DC 모터 정지
	
	while(1)
	{
		for ( i = 0; i < 12; i++ )  // 48 스텝 실행
 108:	8f 5f       	subi	r24, 0xFF	; 255
 10a:	8c 30       	cpi	r24, 0x0C	; 12
 10c:	88 f2       	brcs	.-94     	; 0xb0 <main+0x12>
 10e:	2f ef       	ldi	r18, 0xFF	; 255
 110:	3f e7       	ldi	r19, 0x7F	; 127
 112:	86 e1       	ldi	r24, 0x16	; 22
 114:	21 50       	subi	r18, 0x01	; 1
 116:	30 40       	sbci	r19, 0x00	; 0
 118:	80 40       	sbci	r24, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <main+0x76>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x80>
 11e:	00 00       	nop
 120:	c5 cf       	rjmp	.-118    	; 0xac <main+0xe>

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>
