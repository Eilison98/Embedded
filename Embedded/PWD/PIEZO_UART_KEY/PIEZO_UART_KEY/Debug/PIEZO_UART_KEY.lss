
PIEZO_UART_KEY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000384  000003f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000384  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000040a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000043c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000978  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000085f  00000000  00000000  00000e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c3  00000000  00000000  0000169b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000194  00000000  00000000  00001a60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000462  00000000  00000000  00001bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000392  00000000  00000000  00002056  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000023e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	83 c0       	rjmp	.+262    	; 0x11c <__vector_5>
  16:	00 00       	nop
  18:	be c0       	rjmp	.+380    	; 0x196 <__vector_6>
  1a:	00 00       	nop
  1c:	f9 c0       	rjmp	.+498    	; 0x210 <__vector_7>
  1e:	00 00       	nop
  20:	34 c1       	rjmp	.+616    	; 0x28a <__vector_8>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e8       	ldi	r30, 0x84	; 132
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	09 d0       	rcall	.+18     	; 0xc6 <main>
  b4:	65 c1       	rjmp	.+714    	; 0x380 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <getch>:
volatile unsigned char sound_flag = 1;

unsigned char getch(void)
{
	unsigned char data;
	while((UCSR0A & 0x80)==0); // 데이타를 받을때까지 대기
  b8:	5f 9b       	sbis	0x0b, 7	; 11
  ba:	fe cf       	rjmp	.-4      	; 0xb8 <getch>
	data=UDR0; // 수신된 데이터는 UDR0에 저장되어 있다.
  bc:	8c b1       	in	r24, 0x0c	; 12
	UCSR0A |= 0x80;
  be:	9b b1       	in	r25, 0x0b	; 11
  c0:	90 68       	ori	r25, 0x80	; 128
  c2:	9b b9       	out	0x0b, r25	; 11
	return data; // 읽어온 문자를 반환한다.
}
  c4:	08 95       	ret

000000c6 <main>:

int main(void)
{
	unsigned char RX_data = 0;
	DDRE = 0x0e; // Rx(입력 0), Tx(출력, 1)
  c6:	8e e0       	ldi	r24, 0x0E	; 14
  c8:	82 b9       	out	0x02, r24	; 2
	DDRA = 0xFF; // 포트A 를 출력포트로 설정한다.
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	8a bb       	out	0x1a, r24	; 26
	UCSR0A = 0x00;
  ce:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = 0x18; // Rx, Tx enable
  d0:	88 e1       	ldi	r24, 0x18	; 24
  d2:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = 0x06; // 비동기 방식, No Parity bit, 1 Stop bit
  d4:	86 e0       	ldi	r24, 0x06	; 6
  d6:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	UBRR0H = 0x00;
  da:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 0x07; // 115200 bps
  de:	87 e0       	ldi	r24, 0x07	; 7
  e0:	89 b9       	out	0x09, r24	; 9
	sei();
  e2:	78 94       	sei

	while(1)
	{
		RX_data = getch(); //PC로 부터 입력 받은 데이터를 변수 RX_data에 저장
  e4:	e9 df       	rcall	.-46     	; 0xb8 <getch>
		if((RX_data >= 0x31) && (RX_data <= 0x34))  //  아스키 코드값16진수  1 ~ 4 번
  e6:	9f ec       	ldi	r25, 0xCF	; 207
  e8:	98 0f       	add	r25, r24
  ea:	94 30       	cpi	r25, 0x04	; 4
  ec:	d8 f7       	brcc	.-10     	; 0xe4 <main+0x1e>
		{
			PORTA = DoReMi[RX_data - 0x31]; 
  ee:	e8 2f       	mov	r30, r24
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	f1 97       	sbiw	r30, 0x31	; 49
  f4:	ee 0f       	add	r30, r30
  f6:	ff 1f       	adc	r31, r31
  f8:	ef 5f       	subi	r30, 0xFF	; 255
  fa:	fe 4f       	sbci	r31, 0xFE	; 254
  fc:	80 81       	ld	r24, Z
  fe:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	2f ef       	ldi	r18, 0xFF	; 255
 102:	8f e7       	ldi	r24, 0x7F	; 127
 104:	96 e1       	ldi	r25, 0x16	; 22
 106:	21 50       	subi	r18, 0x01	; 1
 108:	80 40       	sbci	r24, 0x00	; 0
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <main+0x40>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0x4a>
 110:	00 00       	nop
			_delay_ms(1000); // 2초 지연
			TCCR3A = 0x00; // 부저 소리를 끈다.
 112:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
			sound_flag = 0;
 116:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 11a:	e4 cf       	rjmp	.-56     	; 0xe4 <main+0x1e>

0000011c <__vector_5>:
		}
	}
}

SIGNAL(INT4_vect) // 인터럽트 서비스 루틴
{
 11c:	1f 92       	push	r1
 11e:	0f 92       	push	r0
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	0f 92       	push	r0
 124:	11 24       	eor	r1, r1
 126:	0b b6       	in	r0, 0x3b	; 59
 128:	0f 92       	push	r0
 12a:	2f 93       	push	r18
 12c:	3f 93       	push	r19
 12e:	4f 93       	push	r20
 130:	5f 93       	push	r21
 132:	6f 93       	push	r22
 134:	7f 93       	push	r23
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
 13a:	af 93       	push	r26
 13c:	bf 93       	push	r27
 13e:	ef 93       	push	r30
 140:	ff 93       	push	r31
	cli(); // 전체 인터럽트를 금지
 142:	f8 94       	cli
	ICR3 = 7372800/DoReMi[0]/2; // 도의 음향을 연주한다
 144:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <DoReMi>
 148:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <DoReMi+0x1>
 14c:	40 e0       	ldi	r20, 0x00	; 0
 14e:	50 e0       	ldi	r21, 0x00	; 0
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	70 e4       	ldi	r23, 0x40	; 64
 154:	88 e3       	ldi	r24, 0x38	; 56
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	d5 d0       	rcall	.+426    	; 0x304 <__divmodsi4>
 15a:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 15e:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR3A = 0x40; // PE4로 출력
 162:	80 e4       	ldi	r24, 0x40	; 64
 164:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	sound_flag = 1; // 부저 음이 발생하도록 설정
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	sei(); // 전체 인터럽트를 허용
 16e:	78 94       	sei
}
 170:	ff 91       	pop	r31
 172:	ef 91       	pop	r30
 174:	bf 91       	pop	r27
 176:	af 91       	pop	r26
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	7f 91       	pop	r23
 17e:	6f 91       	pop	r22
 180:	5f 91       	pop	r21
 182:	4f 91       	pop	r20
 184:	3f 91       	pop	r19
 186:	2f 91       	pop	r18
 188:	0f 90       	pop	r0
 18a:	0b be       	out	0x3b, r0	; 59
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <__vector_6>:

SIGNAL(INT5_vect) // 인터럽트 서비스 루틴
{
 196:	1f 92       	push	r1
 198:	0f 92       	push	r0
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	0f 92       	push	r0
 19e:	11 24       	eor	r1, r1
 1a0:	0b b6       	in	r0, 0x3b	; 59
 1a2:	0f 92       	push	r0
 1a4:	2f 93       	push	r18
 1a6:	3f 93       	push	r19
 1a8:	4f 93       	push	r20
 1aa:	5f 93       	push	r21
 1ac:	6f 93       	push	r22
 1ae:	7f 93       	push	r23
 1b0:	8f 93       	push	r24
 1b2:	9f 93       	push	r25
 1b4:	af 93       	push	r26
 1b6:	bf 93       	push	r27
 1b8:	ef 93       	push	r30
 1ba:	ff 93       	push	r31
	cli(); // 전체 인터럽트를 금지
 1bc:	f8 94       	cli
	ICR3 = 7372800/DoReMi[1]/2; // 래의 음향을 연주한다
 1be:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <DoReMi+0x2>
 1c2:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <DoReMi+0x3>
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	70 e4       	ldi	r23, 0x40	; 64
 1ce:	88 e3       	ldi	r24, 0x38	; 56
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	98 d0       	rcall	.+304    	; 0x304 <__divmodsi4>
 1d4:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1d8:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR3A = 0x40; // PE4로 출력
 1dc:	80 e4       	ldi	r24, 0x40	; 64
 1de:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	sound_flag = 1; // 부저 음이 발생하도록 설정
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	sei(); // 전체 인터럽트를 허용
 1e8:	78 94       	sei
}
 1ea:	ff 91       	pop	r31
 1ec:	ef 91       	pop	r30
 1ee:	bf 91       	pop	r27
 1f0:	af 91       	pop	r26
 1f2:	9f 91       	pop	r25
 1f4:	8f 91       	pop	r24
 1f6:	7f 91       	pop	r23
 1f8:	6f 91       	pop	r22
 1fa:	5f 91       	pop	r21
 1fc:	4f 91       	pop	r20
 1fe:	3f 91       	pop	r19
 200:	2f 91       	pop	r18
 202:	0f 90       	pop	r0
 204:	0b be       	out	0x3b, r0	; 59
 206:	0f 90       	pop	r0
 208:	0f be       	out	0x3f, r0	; 63
 20a:	0f 90       	pop	r0
 20c:	1f 90       	pop	r1
 20e:	18 95       	reti

00000210 <__vector_7>:

SIGNAL(INT6_vect) // 인터럽트 서비스 루틴
{
 210:	1f 92       	push	r1
 212:	0f 92       	push	r0
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	0f 92       	push	r0
 218:	11 24       	eor	r1, r1
 21a:	0b b6       	in	r0, 0x3b	; 59
 21c:	0f 92       	push	r0
 21e:	2f 93       	push	r18
 220:	3f 93       	push	r19
 222:	4f 93       	push	r20
 224:	5f 93       	push	r21
 226:	6f 93       	push	r22
 228:	7f 93       	push	r23
 22a:	8f 93       	push	r24
 22c:	9f 93       	push	r25
 22e:	af 93       	push	r26
 230:	bf 93       	push	r27
 232:	ef 93       	push	r30
 234:	ff 93       	push	r31
	cli(); // 전체 인터럽트를 금지
 236:	f8 94       	cli
	ICR3 = 7372800/DoReMi[2]/2; // 미의 음향을 연주한다
 238:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <DoReMi+0x4>
 23c:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <DoReMi+0x5>
 240:	40 e0       	ldi	r20, 0x00	; 0
 242:	50 e0       	ldi	r21, 0x00	; 0
 244:	60 e0       	ldi	r22, 0x00	; 0
 246:	70 e4       	ldi	r23, 0x40	; 64
 248:	88 e3       	ldi	r24, 0x38	; 56
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	5b d0       	rcall	.+182    	; 0x304 <__divmodsi4>
 24e:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 252:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR3A = 0x40; // PE4로 출력
 256:	80 e4       	ldi	r24, 0x40	; 64
 258:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	sound_flag = 1; // 부저 음이 발생하도록 설정
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	sei(); // 전체 인터럽트를 허용
 262:	78 94       	sei
}
 264:	ff 91       	pop	r31
 266:	ef 91       	pop	r30
 268:	bf 91       	pop	r27
 26a:	af 91       	pop	r26
 26c:	9f 91       	pop	r25
 26e:	8f 91       	pop	r24
 270:	7f 91       	pop	r23
 272:	6f 91       	pop	r22
 274:	5f 91       	pop	r21
 276:	4f 91       	pop	r20
 278:	3f 91       	pop	r19
 27a:	2f 91       	pop	r18
 27c:	0f 90       	pop	r0
 27e:	0b be       	out	0x3b, r0	; 59
 280:	0f 90       	pop	r0
 282:	0f be       	out	0x3f, r0	; 63
 284:	0f 90       	pop	r0
 286:	1f 90       	pop	r1
 288:	18 95       	reti

0000028a <__vector_8>:

SIGNAL(INT7_vect) // 인터럽트 서비스 루틴
{
 28a:	1f 92       	push	r1
 28c:	0f 92       	push	r0
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	0f 92       	push	r0
 292:	11 24       	eor	r1, r1
 294:	0b b6       	in	r0, 0x3b	; 59
 296:	0f 92       	push	r0
 298:	2f 93       	push	r18
 29a:	3f 93       	push	r19
 29c:	4f 93       	push	r20
 29e:	5f 93       	push	r21
 2a0:	6f 93       	push	r22
 2a2:	7f 93       	push	r23
 2a4:	8f 93       	push	r24
 2a6:	9f 93       	push	r25
 2a8:	af 93       	push	r26
 2aa:	bf 93       	push	r27
 2ac:	ef 93       	push	r30
 2ae:	ff 93       	push	r31
	cli(); // 전체 인터럽트를 금지
 2b0:	f8 94       	cli
	ICR3 = 7372800/DoReMi[3]/2; // 파의 음향을 연주한다
 2b2:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <DoReMi+0x6>
 2b6:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <DoReMi+0x7>
 2ba:	40 e0       	ldi	r20, 0x00	; 0
 2bc:	50 e0       	ldi	r21, 0x00	; 0
 2be:	60 e0       	ldi	r22, 0x00	; 0
 2c0:	70 e4       	ldi	r23, 0x40	; 64
 2c2:	88 e3       	ldi	r24, 0x38	; 56
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	1e d0       	rcall	.+60     	; 0x304 <__divmodsi4>
 2c8:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 2cc:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR3A = 0x40; // PE4로 출력
 2d0:	80 e4       	ldi	r24, 0x40	; 64
 2d2:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	sound_flag = 1; // 부저 음이 발생하도록 설정
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	sei(); // 전체 인터럽트를 허용
 2dc:	78 94       	sei
}
 2de:	ff 91       	pop	r31
 2e0:	ef 91       	pop	r30
 2e2:	bf 91       	pop	r27
 2e4:	af 91       	pop	r26
 2e6:	9f 91       	pop	r25
 2e8:	8f 91       	pop	r24
 2ea:	7f 91       	pop	r23
 2ec:	6f 91       	pop	r22
 2ee:	5f 91       	pop	r21
 2f0:	4f 91       	pop	r20
 2f2:	3f 91       	pop	r19
 2f4:	2f 91       	pop	r18
 2f6:	0f 90       	pop	r0
 2f8:	0b be       	out	0x3b, r0	; 59
 2fa:	0f 90       	pop	r0
 2fc:	0f be       	out	0x3f, r0	; 63
 2fe:	0f 90       	pop	r0
 300:	1f 90       	pop	r1
 302:	18 95       	reti

00000304 <__divmodsi4>:
 304:	05 2e       	mov	r0, r21
 306:	97 fb       	bst	r25, 7
 308:	16 f4       	brtc	.+4      	; 0x30e <__divmodsi4+0xa>
 30a:	00 94       	com	r0
 30c:	0f d0       	rcall	.+30     	; 0x32c <__negsi2>
 30e:	57 fd       	sbrc	r21, 7
 310:	05 d0       	rcall	.+10     	; 0x31c <__divmodsi4_neg2>
 312:	14 d0       	rcall	.+40     	; 0x33c <__udivmodsi4>
 314:	07 fc       	sbrc	r0, 7
 316:	02 d0       	rcall	.+4      	; 0x31c <__divmodsi4_neg2>
 318:	46 f4       	brtc	.+16     	; 0x32a <__divmodsi4_exit>
 31a:	08 c0       	rjmp	.+16     	; 0x32c <__negsi2>

0000031c <__divmodsi4_neg2>:
 31c:	50 95       	com	r21
 31e:	40 95       	com	r20
 320:	30 95       	com	r19
 322:	21 95       	neg	r18
 324:	3f 4f       	sbci	r19, 0xFF	; 255
 326:	4f 4f       	sbci	r20, 0xFF	; 255
 328:	5f 4f       	sbci	r21, 0xFF	; 255

0000032a <__divmodsi4_exit>:
 32a:	08 95       	ret

0000032c <__negsi2>:
 32c:	90 95       	com	r25
 32e:	80 95       	com	r24
 330:	70 95       	com	r23
 332:	61 95       	neg	r22
 334:	7f 4f       	sbci	r23, 0xFF	; 255
 336:	8f 4f       	sbci	r24, 0xFF	; 255
 338:	9f 4f       	sbci	r25, 0xFF	; 255
 33a:	08 95       	ret

0000033c <__udivmodsi4>:
 33c:	a1 e2       	ldi	r26, 0x21	; 33
 33e:	1a 2e       	mov	r1, r26
 340:	aa 1b       	sub	r26, r26
 342:	bb 1b       	sub	r27, r27
 344:	fd 01       	movw	r30, r26
 346:	0d c0       	rjmp	.+26     	; 0x362 <__udivmodsi4_ep>

00000348 <__udivmodsi4_loop>:
 348:	aa 1f       	adc	r26, r26
 34a:	bb 1f       	adc	r27, r27
 34c:	ee 1f       	adc	r30, r30
 34e:	ff 1f       	adc	r31, r31
 350:	a2 17       	cp	r26, r18
 352:	b3 07       	cpc	r27, r19
 354:	e4 07       	cpc	r30, r20
 356:	f5 07       	cpc	r31, r21
 358:	20 f0       	brcs	.+8      	; 0x362 <__udivmodsi4_ep>
 35a:	a2 1b       	sub	r26, r18
 35c:	b3 0b       	sbc	r27, r19
 35e:	e4 0b       	sbc	r30, r20
 360:	f5 0b       	sbc	r31, r21

00000362 <__udivmodsi4_ep>:
 362:	66 1f       	adc	r22, r22
 364:	77 1f       	adc	r23, r23
 366:	88 1f       	adc	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	1a 94       	dec	r1
 36c:	69 f7       	brne	.-38     	; 0x348 <__udivmodsi4_loop>
 36e:	60 95       	com	r22
 370:	70 95       	com	r23
 372:	80 95       	com	r24
 374:	90 95       	com	r25
 376:	9b 01       	movw	r18, r22
 378:	ac 01       	movw	r20, r24
 37a:	bd 01       	movw	r22, r26
 37c:	cf 01       	movw	r24, r30
 37e:	08 95       	ret

00000380 <_exit>:
 380:	f8 94       	cli

00000382 <__stop_program>:
 382:	ff cf       	rjmp	.-2      	; 0x382 <__stop_program>
